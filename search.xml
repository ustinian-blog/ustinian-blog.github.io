<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/11/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>python requests详解</title>
    <url>/2024/11/20/python%20requests/</url>
    <content><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><h3 id="1、requests简介"><a href="#1、requests简介" class="headerlink" title="1、requests简介"></a>1、requests简介</h3><p>requests是一个很实用的 Python HTTP客户端库 ，爬虫和测试服务器响应数据时经常会用到，它是python语言的第三方的库，专门&#x3D;&#x3D;用于发送HTTP请求&#x3D;&#x3D;，使用起来比<a href="https://so.csdn.net/so/search?q=urllib&spm=1001.2101.3001.7020">urllib</a>更简洁也更强大。</p>
<h3 id="2-requests-安装"><a href="#2-requests-安装" class="headerlink" title="2. requests 安装"></a>2. requests 安装</h3><p>这里我直接在windows系统的系统命令行中安装，（python的版本是python3)，</p>
<blockquote>
<p>pip3 install requests</p>
</blockquote>
<h2 id="二、常用方法"><a href="#二、常用方法" class="headerlink" title="二、常用方法"></a>二、常用方法</h2><table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">requests.request(url)</td>
<td align="center">构造一个请求，支持以下各种方法</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">requests.get()</td>
<td align="center">发送一个get请求</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">requests.post()</td>
<td align="center">发送一个post请求</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">requests.header()</td>
<td align="center">获取该HTML的头部信息</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">requests.put()</td>
<td align="center">发送put请求</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">requests.patch()</td>
<td align="center">提交局部修改的请求</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">requests.delete()</td>
<td align="center">提交删除请求</td>
</tr>
</tbody></table>
<h2 id="三、常用属性或方法"><a href="#三、常用属性或方法" class="headerlink" title="三、常用属性或方法"></a>三、常用属性或方法</h2><table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">属性或方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">response.status_code</td>
<td align="center">响应状态码</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">response.content</td>
<td align="center">把response对象转换为二进制数据</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">response.text</td>
<td align="center">把response对象转换为字符串数据</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">response.encoding</td>
<td align="center">定义response对象的编码</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">response.cookie</td>
<td align="center">获取请求后的cookie</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">response.url</td>
<td align="center">获取请求网址</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">response.json()</td>
<td align="center">内置的 JSON 解码器</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">Response.headers</td>
<td align="center">以字典对象存储服务器响应头，字典键不区分大小写</td>
</tr>
</tbody></table>
<h2 id="四、发送请求"><a href="#四、发送请求" class="headerlink" title="四、发送请求"></a>四、发送请求</h2><h3 id="1-发送get请求"><a href="#1-发送get请求" class="headerlink" title="1.发送get请求"></a>1.发送get请求</h3><p>1.不带参数的请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">#定义百度URL，获取百度页面HTML</span><br><span class="line">url=&quot;http://www.baidu.com&quot;</span><br><span class="line"></span><br><span class="line">#使用get发送请求</span><br><span class="line">res=response.get(url)</span><br><span class="line"></span><br><span class="line">#将返回对象的二进制数据进行解码并输出</span><br><span class="line">print(res.content.decode(&quot;UTF-8&quot;))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.带参数的请求</p>
<ul>
<li>将参数放在url中进行请求</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">#将参数name和age放在get请求中</span><br><span class="line">res=requests.get(&quot;http://httpbin.org/get?name=gemey&amp;age=22&quot;)</span><br><span class="line"></span><br><span class="line">#输出返回对象的文本结果</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>

<ul>
<li>将参数放在字典中进行请求</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">#将参数name和age定义到字典params里</span><br><span class="line">params&#123;</span><br><span class="line">	&quot;name&quot;:&quot;tony&quot;,</span><br><span class="line">	&quot;age&quot;:18</span><br><span class="line">&#125;</span><br><span class="line">url=&quot;http://www.baidu.com&quot;</span><br><span class="line"></span><br><span class="line">#发送请求</span><br><span class="line">res=request.get(url=url,params=params)</span><br><span class="line"></span><br><span class="line">#输出返回对象的文本结果</span><br><span class="line">print(res.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>自定义HTML头进行请求</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">#将参数写入字典内</span><br><span class="line">params=&#123;</span><br><span class="line">	&quot;name&quot;=&quot;tony&quot;,</span><br><span class="line">	&quot;age&quot;=20</span><br><span class="line">&#125;</span><br><span class="line">#定义HTTP头信息</span><br><span class="line">hearders=&#123;</span><br><span class="line">	&quot;Urser-agent&quot;:&quot;Mozilla/5.0 (Linux; Android 8.1.0; SM-P585Y) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36&quot;,</span><br><span class="line">	&quot;referer&quot;:&quot;https://www.abidu.com&quot;,</span><br><span class="line">	&quot;Cookie&quot;:&quot;12345678&quot;</span><br><span class="line">	&#125;</span><br><span class="line">#发送请求参数</span><br><span class="line">url=&quot;https://www.abidu.com&quot;</span><br><span class="line">#发送请求参数</span><br><span class="line">res=requests.get(url=url,params=params,headers=headers)</span><br><span class="line">#输出返回对象的文本结果</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>



<h3 id="2-发送post请求"><a href="#2-发送post请求" class="headerlink" title="2.发送post请求"></a>2.发送post请求</h3><p>post请求用于提交参数，所以直接进行带有参数的post请求参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">#将参数写入字典内</span><br><span class="line">params=&#123;</span><br><span class="line">	&quot;name&quot;=&quot;tony&quot;,</span><br><span class="line">	&quot;age&quot;=20</span><br><span class="line">&#125;</span><br><span class="line">#定义HTTP头信息</span><br><span class="line">hearders=&#123;</span><br><span class="line">	&quot;Urser-agent&quot;:&quot;Mozilla/5.0 (Linux; Android 8.1.0; SM-P585Y) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36&quot;,</span><br><span class="line">	&quot;referer&quot;:&quot;https://www.abidu.com&quot;,</span><br><span class="line">	&quot;Cookie&quot;:&quot;12345678&quot;</span><br><span class="line">	&#125;</span><br><span class="line">#发送请求参数</span><br><span class="line">url=&quot;https://www.abidu.com&quot;</span><br><span class="line">#发送请求参数</span><br><span class="line">res=requests.post(url=url,params=params,headers=headers)</span><br><span class="line">#输出返回对象的文本结果</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>



<h2 id="五、读取内容"><a href="#五、读取内容" class="headerlink" title="五、读取内容"></a>五、读取内容</h2><p>大部分情况下，我们可以直接使用text输出返回内容，但是当有中文的情况下，使用text会出现乱码的情况。</p>
<p>上面提到了，content和text的区别在于content存储的是字节码，而text存储的是Beautifulsoup模块根据猜测的编码方式将content内容解码后的结果。</p>
<p>所以要解决text乱码的问题，就需要&#x3D;&#x3D;使用content对象手动解码&#x3D;&#x3D;后才能显示</p>
<h3 id="1-以content方式读取"><a href="#1-以content方式读取" class="headerlink" title="1.以content方式读取"></a>1.以content方式读取</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&quot;http://www.baidu.com&quot;</span><br><span class="line">res=requests.get(url)</span><br><span class="line">#不进行解码，直接输出</span><br><span class="line">print(res.content)</span><br><span class="line">#进行解码</span><br><span class="line">print(res.content.decode(&quot;UTF-8&quot;))</span><br></pre></td></tr></table></figure>



<h3 id="2-以text方式读取"><a href="#2-以text方式读取" class="headerlink" title="2.以text方式读取"></a>2.以text方式读取</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&quot;http://www.baidu.com&quot;</span><br><span class="line">res=requests.get(url)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>

<p>输出结果：中文部分出现乱码</p>
<h3 id="3-读取json数据"><a href="#3-读取json数据" class="headerlink" title="3.读取json数据"></a>3.读取json数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">#将参数写入字典内</span><br><span class="line">params=&#123;</span><br><span class="line">	&quot;name&quot;=&quot;tony&quot;,</span><br><span class="line">	&quot;age&quot;=20</span><br><span class="line">&#125;</span><br><span class="line">#定义HTTP头信息</span><br><span class="line">hearders=&#123;</span><br><span class="line">	&quot;Urser-agent&quot;:&quot;Mozilla/5.0 (Linux; Android 8.1.0; SM-P585Y) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36&quot;,</span><br><span class="line">	&quot;referer&quot;:&quot;https://www.abidu.com&quot;,</span><br><span class="line">	&quot;Cookie&quot;:&quot;12345678&quot;</span><br><span class="line">	&#125;</span><br><span class="line">#发送请求参数</span><br><span class="line">url=&quot;https://www.abidu.com&quot;</span><br><span class="line">#发送请求参数</span><br><span class="line">res=requests.get(url=url,params=params,headers=headers)</span><br><span class="line">#输出返回对象的文本结果</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>json是一种文本格式， 使用键值对的形式组织数据，数据之间使用逗号 <code>,</code> 分隔</p>
</blockquote>
<h3 id="4-读取cookies"><a href="#4-读取cookies" class="headerlink" title="4.读取cookies"></a>4.读取cookies</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&quot;http://www.baidu.com&quot;</span><br><span class="line">res=requests.get(url)</span><br><span class="line">#这里直接使用cookies返回的是RequestcookiesJar对象，所以需用再用extract_cookies对象对该对象进行解析</span><br><span class="line">print(res.cookies.extract_cookies)</span><br></pre></td></tr></table></figure>

<h2 id="六、其他方法"><a href="#六、其他方法" class="headerlink" title="六、其他方法"></a>六、其他方法</h2><h3 id="1-设置超时报错"><a href="#1-设置超时报错" class="headerlink" title="1.设置超时报错"></a>1.<strong>设置超时报错</strong></h3><p>可以通过&#x3D;&#x3D;timeout属性&#x3D;&#x3D;设置<strong>超时时间</strong>，一旦超出这个时间还没得到响应内容，就会提示报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&quot;http://www.baidu.com&quot;</span><br><span class="line">#设置超时上线时间为1s</span><br><span class="line">res=requests.get(url=url,timeout=1)</span><br><span class="line">print(res.content.decode(UTF-8))</span><br></pre></td></tr></table></figure>



<h3 id="2-处理异常"><a href="#2-处理异常" class="headerlink" title="2.处理异常"></a>2.处理异常</h3><p>当超过设定时间会出现报错，这时我们可以使用<a href="https://baijiahao.baidu.com/s?id=1776589733040466083&wfr=spider&for=pc">try语句</a>处理异常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&quot;http://www.baidu.com&quot;</span><br><span class="line"></span><br><span class="line">#使用try语句处理异常</span><br><span class="line">try:</span><br><span class="line"></span><br><span class="line">res=requests.get(url=url,timeout=1)</span><br><span class="line">print(res.content.decide(&quot;UTF-8&quot;))</span><br><span class="line"></span><br><span class="line">except exceptions.timeout as e:</span><br><span class="line">	print(e)</span><br><span class="line">except exceptions.HTTPError as e:</span><br><span class="line">	print(e)</span><br></pre></td></tr></table></figure>

<p>到这里，你可能对expect expections as  e 有些疑惑，<a href="https://wenku.csdn.net/answer/2cddbcf6868911ed9a8700163e34985e">请点击这里</a></p>
<h3 id="3-设置代理"><a href="#3-设置代理" class="headerlink" title="3.设置代理"></a>3.设置代理</h3><p><strong>代理格式</strong>：proxies&#x3D;{‘协议’：’协议：&#x2F;&#x2F;IP：端口号’}</p>
<p><strong>提示</strong>：当我们抓取的地址为http时，则设置http代理，反之则设置https</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&quot;http://www.baidu.com&quot;</span><br><span class="line"></span><br><span class="line">#使用字典定义代理</span><br><span class="line">proxies=&#123;</span><br><span class="line">	&#x27;http&#x27;:&#x27;http://123.45.67.76:8888&#x27;,</span><br><span class="line">	&#x27;http&#x27;:&#x27;http://123.45.67.76:4433&#x27;</span><br><span class="line">&#125;</span><br><span class="line">#使用try语句处理异常</span><br><span class="line">try:</span><br><span class="line"></span><br><span class="line">	res=requests.get(url=url,timeout=1,proxies=proxies)</span><br><span class="line">	print(res.content.decide(&quot;UTF-8&quot;))</span><br><span class="line"></span><br><span class="line">except exceptions.timeout as e:</span><br><span class="line">	print(e)</span><br><span class="line">except exceptions.HTTPError as e:</span><br><span class="line">	print(e)</span><br></pre></td></tr></table></figure>

<h3 id="4-使用session进行会话控制"><a href="#4-使用session进行会话控制" class="headerlink" title="4.使用session进行会话控制"></a>4.使用session进行会话控制</h3><blockquote>
<p>直接 requests.get() 或者 requests.post() 发送GET请求或POST请求；当然也是可以带上 cookies 和 headers 的，但这都是一次性请求，你这次带着cookies信息，后面的请求还得带。</p>
<p>如果使用sessionl来发起请求，session实例在请求了一个网站后，对方服务器设置在本地的cookie会保存在session中，下一次再使用session请求对方服务器的时候，会带上前一次的cookie，从而实现回话保持。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">#使用session,需要先实例化一个对象</span><br><span class="line">session=requests.session()</span><br><span class="line"></span><br><span class="line">headers&#123;</span><br><span class="line">	 &#x27;User-Agent&#x27;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36&quot;,</span><br><span class="line">        &#x27;Referer&#x27;: &quot;https://creator.douyin.com/&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url=&#x27;https://sso.******.com/get_qrcode/?next=https:%2F%2Fcreator.douyin.com%2Fcreator-micro%2Fhome&amp;aid=2906&amp;service=https:%2F%2Fcreator.douyin.com&amp;is_vcd=1&amp;fp=ktv0uumo_gD7FPCuy_MfX7_44zL_9T1C_6i8sUgr4bDT6&#x27;</span><br><span class="line"></span><br><span class="line">data1=&#123;</span><br><span class="line">	&quot;name&quot;:&quot;test&quot;</span><br><span class="line">	&quot;passwd&quot;:&quot;passwd&quot;</span><br><span class="line">&#125;</span><br><span class="line">data2=&#123;</span><br><span class="line">	&quot;name&quot;:&quot;test&quot;,</span><br><span class="line">	&quot;age&quot;:20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#使用session对象发起请求，进行登录</span><br><span class="line">try:</span><br><span class="line">	res=session.get(url=url,timeout=1,headers=headers,data=data1)</span><br><span class="line">	print(res.json())</span><br><span class="line">#使用的登录后的session对需要登录的操作再次发起请求。</span><br><span class="line">	res2=session.post(url,data=data2)</span><br><span class="line">except exceptions.timeout as e:</span><br><span class="line">	print(e)</span><br><span class="line">except exceptions.HTTPError as e:</span><br><span class="line">	print(e)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>分类</title>
    <url>/2024/11/20/categories/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
